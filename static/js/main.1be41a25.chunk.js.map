{"version":3,"sources":["stores/MineSweeperGame.js","components/NewGameScreen.js","components/GameHeader.js","components/GameGrid.js","components/GameScreen.js","App.js","serviceWorker.js","index.js"],"names":["chance","Chance","MineSweeperGame","numMines","numRows","numCols","_this","this","Object","classCallCheck","grid","timeStart","timeCurrent","moment","setInterval","tickTime","Array","row","col","Cell","cells","_","flatten","pickset","forEach","cell","isMine","isGameInProgress","map","toString","join","filter","size","isFlagged","isSelected","isGameLost","numSelected","numFlaggedMines","some","isGameWon","diff","decorate","observable","action","computed","numFlagged","secondsElapsed","game","neighboringMineCount","neighbors","select","result","concat","push","length","neighboringMines","flag","NewGameScreen","props","possibleConstructorReturn","getPrototypeOf","call","state","setState","event","_this$state","onNewGame","_this2","react_default","a","createElement","className","type","value","onChange","e","handleNumMinesChange","target","handleNumRowsChange","handleNumColsChange","onClick","handleNewGameBtnClick","React","Component","observer","GameHeader","Fragment","renderFace","GameGrid","cellClasses","cellContents","key","handleCellClick","onContextMenu","handleCellRightClick","rowNum","renderCell","_this3","renderRow","GameScreen","components_GameHeader","components_GameGrid","App","when","alert","components_NewGameScreen","handleNewGame","components_GameScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1be41a25.chunk.js","sourcesContent":["import { observable, computed, decorate, action } from \"mobx\";\n\nimport Chance from 'chance';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nconst chance = new Chance();\n\nclass MineSweeperGame {\n  grid = [];\n  numRows = 0;\n  numCols = 0;\n  timeStart = 0;\n  timeCurrent = 0;\n  \n  constructor(numMines, numRows, numCols) {\n    \n    this.timeCurrent = moment();\n    this.timeStart = this.timeCurrent;\n    setInterval(() => this.tickTime(), 1000);\n\n    this.numRows = numRows;\n    this.numCols = numCols;\n    this.grid = new Array(numRows);\n\n    for (let row = 0; row < numRows; row++) {\n      this.grid[row] = new Array(numCols);\n\n      for (let col = 0; col < numCols; col++) {\n        this.grid[row][col] = new Cell(this, row, col);\n      } \n    }\n\n    const cells = _.flatten(this.grid);\n    chance.pickset(cells, numMines).forEach(cell => cell.isMine = true);\n  }\n\n  tickTime() {\n    if (!this.isGameInProgress) return;\n\n    this.timeCurrent = moment();\n  }\n\n  get numMines() {\n    return _(this.grid).flatten().filter(cell => cell.isMine).size();\n  }\n\n  get numFlagged() {\n    return _(this.grid).flatten().filter(cell => cell.isFlagged).size();\n  }\n\n  get numFlaggedMines() {\n    return _(this.grid).flatten().filter(cell => cell.isFlagged && cell.isMine).size();\n  }\n\n  get numSelected() {\n    return _(this.grid).flatten().filter(cell => cell.isSelected).size();\n  }\n\n  get isGameWon() {\n    return !this.isGameLost && this.numSelected + this.numMines === this.numRows * this.numCols && this.numFlaggedMines === this.numMines;\n  }\n\n  get isGameLost() {\n    return _(this.grid).flatten().filter(cell => cell.isSelected && cell.isMine).some();\n  }\n\n  get isGameInProgress() {\n    return !this.isGameWon && !this.isGameLost;\n  }\n\n  get secondsElapsed() {\n    return this.timeCurrent.diff(this.timeStart, 'seconds');\n  }\n\n  toString() {\n    return this.grid.map((row) => row.map(cell => cell.toString()).join('')).join('\\n');\n  }\n}\n\ndecorate(MineSweeperGame, {\n  grid: observable,\n  numRows: observable,\n  numCols: observable,\n  timeStart: observable,\n  timeCurrent: observable,\n\n  tickTime: action,\n\n  numMines: computed,\n  numFlagged: computed,\n  numFlaggedMines: computed,\n  numSelected: computed,\n  isGameWon: computed,\n  isGameLost: computed,\n  isGameInProgress: computed,\n  secondsElapsed: computed,\n});\n\nclass Cell {\n  game = null;\n  row = null;\n  col = null;\n  isMine = false;\n  isFlagged = false;\n  isSelected = false;\n\n  constructor(game, row, col) {\n    this.game = game;\n    this.row = row;\n    this.col = col;\n  }\n\n  flag() {\n    this.isFlagged = !this.isFlagged;\n  }\n\n  select() {\n    this.isSelected = true;\n\n    if (this.isMine || this.neighboringMineCount > 0) return;\n\n    this.neighbors\n      .filter(cell => !cell.isMine && !cell.isSelected)\n      .forEach(cell => cell.select());\n  }\n\n  get neighbors() {\n    \n    const {row, col} = this;\n    const grid = this.game.grid;\n    const neighbors = [];\n\n    // top\n    if (row > 0)\n      neighbors.push(grid[row-1][col]);\n    // bottom\n    if (row < grid.length-1)\n      neighbors.push(grid[row+1][col]);\n    // left\n    if (col > 0)\n      neighbors.push(grid[row][col-1]);\n    // right\n    if (col < grid[0].length-1)\n      neighbors.push(grid[row][col+1]);\n\n    // top-left\n    if (row > 0 && col > 0)\n      neighbors.push(grid[row-1][col-1]);\n    // top-right\n    if (row > 0 && col < grid[0].length-1)\n      neighbors.push(grid[row-1][col+1]);\n    // bottom-left\n    if (row < grid.length-1 && col > 0)\n      neighbors.push(grid[row+1][col-1])\n    // bottom-right\n    if (row < grid.length-1 && col < grid[0].length-1)\n      neighbors.push(grid[row+1][col+1])\n\n    return neighbors;\n  }\n\n  get neighboringMines() {\n    return this.neighbors.filter(cell => cell.isMine);\n  }\n\n  get neighboringMineCount() {\n    return this.neighboringMines.length;\n  }\n\n  toString() {\n    let result;\n\n    if (this.isMine) result = 'M';\n    else if (this.isFlagged) result = 'F';\n    else result = `${this.neighboringMineCount}`;\n\n    return (this.isSelected ? `[|${result}|]` : `[ ${result} ]`);\n  }\n}\n\ndecorate(Cell, {\n  game: observable,\n  row: observable,\n  col: observable,\n  isMine: observable,\n  isFlagged: observable,\n  isSelected: observable,\n\n  select: action,\n  flag: action,\n\n  neighbors: computed,\n  neighboringMines: computed,\n  neighboringMineCount: computed,\n});\n\nexport { MineSweeperGame, Cell };","import React from 'react';\nimport { observer } from \"mobx-react\"\n\nimport { MineSweeperGame } from '../stores/MineSweeperGame';\n\nclass NewGameScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      numMines: 2,\n      numRows: 5,\n      numCols: 5,\n    };\n  }\n\n  handleNumMinesChange(numMines) {\n    this.setState({numMines});\n  }\n\n  handleNumRowsChange(numRows) {\n    this.setState({numRows});\n  }\n\n  handleNumColsChange(numCols) {\n    this.setState({numCols});\n  }\n\n  handleNewGameBtnClick(event) {\n    const {numMines, numRows, numCols} = this.state;\n\n    this.props.onNewGame(new MineSweeperGame(numMines, numRows, numCols));\n  }\n\n  render() {\n    return (\n      <div className=\"new-game-screen\">\n        <div className=\"new-game-input\">\n          <label>Number of Mines:</label>\n          <input type=\"number\" value={this.state.numMines} onChange={(e) => this.handleNumMinesChange(e.target.value)}></input>\n        </div>\n\n        <div className=\"new-game-input\">\n          <label>Number of Rows:</label>\n          <input type=\"number\" value={this.state.numRows} onChange={(e) => this.handleNumRowsChange(e.target.value)}></input>\n        </div>\n\n        <div className=\"new-game-input\">\n          <label>Number of Cols:</label>\n          <input type=\"number\" value={this.state.numCols} onChange={(e) => this.handleNumColsChange(e.target.value)}></input>\n        </div>\n\n        <div className=\"new-game-btn\">\n          <button onClick={() => this.handleNewGameBtnClick()}>New Game</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default observer(NewGameScreen);","import React from 'react';\nimport { observer } from \"mobx-react\"\n\nclass GameHeader extends React.Component {\n  renderFace() {\n    const {game} = this.props;\n\n    if (game.isGameWon) {\n      return (<React.Fragment>&#128512;</React.Fragment>); // Grinning Face Emoji\n    } else if (game.isGameLost) {\n      return (<React.Fragment>&#128565;</React.Fragment>); // Dizzy Face Emoji\n    } else {\n      return (<React.Fragment>&#128528;</React.Fragment>); // Neutral Face Emoji\n    }\n  }\n\n  render() {\n    const {game} = this.props;\n\n    return (\n      <div className=\"game-header\">\n        <div className=\"game-header-mine-count\">\n          Mines: {game.numMines - game.numFlagged}\n        </div>\n        <div className=\"game-header-face\">\n          {this.renderFace()}\n        </div>\n        <div className=\"game-header-timer\">\n          Time: {game.secondsElapsed}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default observer(GameHeader);","import React from 'react';\nimport { observer } from \"mobx-react\"\n\nclass GameGrid extends React.Component {\n\n  handleCellClick(cell) {\n    if (!this.props.game.isGameInProgress) return;\n    cell.select();\n  }\n\n  handleCellRightClick(cell) {\n    const {game} = this.props;\n\n    if (!game.isGameInProgress || game.numFlagged >= game.numMines) return;\n    cell.flag();\n  }\n\n  renderCell(cell) {\n    const {game} = this.props;\n    let cellClasses = ['game-grid-cell'];\n    let cellContents = (<React.Fragment>&nbsp;</React.Fragment>);\n\n    if (cell.isSelected) {\n      cellClasses.push('selected');\n    }\n\n    if (cell.isMine && (cell.isSelected || game.isGameLost)) {\n      cellClasses.push('bomb');\n      cellContents = (<React.Fragment>&#128163;</React.Fragment>); // Bomb Emoji\n    } else if (cell.isFlagged) {\n      cellClasses.push('flagged');\n      cellContents = (<React.Fragment>&#128205;</React.Fragment>); // Pin Emoji\n    } else if (cell.isSelected && cell.neighboringMineCount > 0) {\n      cellClasses.push(`has-${cell.neighboringMineCount}-neighbors`);\n      cellContents = (<React.Fragment>{cell.neighboringMineCount}</React.Fragment>);\n    }\n\n    return (\n      <div \n        className={cellClasses.join(' ')}\n        key={cell.col}\n        onClick={() => this.handleCellClick(cell)}\n        onContextMenu={() => this.handleCellRightClick(cell)}\n      >\n        {cellContents}\n      </div>\n    );\n  }\n\n  renderRow(row, rowNum) {\n    return (\n      <div className=\"game-grid-row\" key={rowNum}>\n        {row.map(cell => this.renderCell(cell))}\n      </div>\n    );\n  }\n\n  render() {\n    const {game} = this.props;\n\n    return (\n      <div className=\"game-grid\">\n        {game.grid.map((row, rowNum) => this.renderRow(row, rowNum))}\n      </div>\n    );\n  }\n}\n\nexport default observer(GameGrid);","import React from 'react';\nimport { observer } from \"mobx-react\"\n\nimport GameHeader from './GameHeader';\nimport GameGrid from './GameGrid';\n\nclass GameScreen extends React.Component {\n  render() {\n    return (\n      <div className=\"game-screen\">\n        <GameHeader game={this.props.game}/>\n        <GameGrid game={this.props.game}/>\n      </div>\n    );\n  }\n}\n\nexport default observer(GameScreen);","import React from 'react';\nimport { when } from 'mobx';\nimport { observer } from \"mobx-react\"\n\nimport NewGameScreen from './components/NewGameScreen';\nimport GameScreen from './components/GameScreen';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      game: null,\n    };\n\n    when(\n      () => this.state.game !== null && this.state.game.isGameLost,\n      () => alert('Game Over!')\n    );\n\n    when(\n      () => this.state.game !== null && this.state.game.isGameWon,\n      () => alert('You Win!')\n    );\n  }\n\n  handleNewGame(game) {\n    this.setState({game});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.game === null && (<NewGameScreen onNewGame={(game) => this.handleNewGame(game)}/>)}\n        {this.state.game !== null && (<GameScreen game={this.state.game}/>)}\n      </div>\n    );\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}